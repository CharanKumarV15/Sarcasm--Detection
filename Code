import json
import pandas as pd
import numpy as np
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report, accuracy_score


nltk.download('stopwords')
from nltk.corpus import stopwords


def load_dataset(filepath):
    headlines = []
    labels = []
    with open(filepath, 'r') as file:
        for line in file:
            data = json.loads(line)
            headlines.append(data['headline'])
            labels.append(data['is_sarcastic'])
    return pd.DataFrame({'headline': headlines, 'label': labels})


df = load_dataset('Sarcasm_Headlines_Dataset.json')  # Make sure the file path is correct


stop_words = set(stopwords.words('english'))

def preprocess(text):
    return ' '.join([word for word in text.lower().split() if word not in stop_words])

df['clean_text'] = df['headline'].apply(preprocess)


X_train, X_test, y_train, y_test = train_test_split(df['clean_text'], df['label'], test_size=0.2, random_state=42)


vectorizer = TfidfVectorizer(max_features=5000)
X_train_vec = vectorizer.fit_transform(X_train)
X_test_vec = vectorizer.transform(X_test)

model = LogisticRegression()
model.fit(X_train_vec, y_train)


y_pred = model.predict(X_test_vec)


print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
